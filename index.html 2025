<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>القطاعات الصحية التابعة لفرع وزارة الصحة بمنطقة عسير</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        :root {
            --moh-green: #007e3a;
            --moh-light-green: #e0f2e6;
            --moh-dark-green: #00612d;
            --moh-gold: #d4af37;
            --moh-white: #ffffff;
            --moh-light-gray: #f5f5f5;
            --moh-text: #333333;
        }
        body {
            background-color: var(--moh-light-gray);
            color: var(--moh-text);
            min-height: 100vh;
            padding: 15px;
            line-height: 1.6;
            overflow-x: hidden;
        }
        .container { max-width: 1400px; margin: 0 auto; }
        header {
            background: linear-gradient(135deg, var(--moh-green), var(--moh-dark-green));
            color: var(--moh-white); padding: 20px; border-radius: 12px;
            margin-bottom: 25px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15); text-align: center;
        }
        .logo-container { display: flex; align-items: center; justify-content: center; gap: 15px; margin-bottom: 15px; }
        .logo {
            width: 70px; height: 70px; background-color: var(--moh-white);
            border-radius: 50%; display: flex; align-items: center; justify-content: center;
            font-size: 30px; color: var(--moh-green); box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        h1 { font-size: 1.8rem; margin-bottom: 10px; animation: slideDownFadeIn 0.6s ease-out 0.3s backwards; }
        p.subtitle { font-size: 1rem; opacity: 0.9; max-width: 800px; margin: 0 auto; animation: slideDownFadeIn 0.6s ease-out 0.5s backwards; }
        .animate-on-scroll {
            opacity: 0;
            transform: translateY(30px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }
        .animate-on-scroll.visible {
            opacity: 1;
            transform: translateY(0);
        }
        .dashboard { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 25px; }
        .card {
            background: var(--moh-white); border-radius: 12px; overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover { transform: translateY(-5px); box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15); }
        .card-header {
            background: linear-gradient(135deg, var(--moh-green), var(--moh-dark-green));
            color: var(--moh-white); padding: 15px 20px; font-size: 1.1rem;
            font-weight: bold; display: flex; align-items: center; gap: 10px;
        }
        .card-body { padding: 20px; height: 400px; }
        .map-container { height: 100%; position: relative; }
        #hospitals-map { width: 100%; height: 100%; border-radius: 8px; z-index: 1; }
        .stats-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            height: 100%;
            overflow-y: auto;
            padding: 5px;
        }
        .stat-card {
            background: linear-gradient(135deg, var(--moh-green), var(--moh-dark-green));
            color: var(--moh-white); padding: 15px; border-radius: 8px; text-align: center;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1); transition: transform 0.3s ease;
            cursor: pointer; display: flex; flex-direction: column; align-items: center;
            justify-content: center; min-height: 120px;
        }
        .stat-card:hover { transform: translateY(-3px); }
        .stat-icon {
            font-size: 1.8rem; margin-bottom: 8px; background: rgba(255, 255, 255, 0.2);
            width: 50px; height: 50px; border-radius: 50%; display: flex;
            align-items: center; justify-content: center;
            transition: transform 0.3s ease-out;
        }
        .stat-card:hover .stat-icon {
            transform: rotate(15deg) scale(1.1);
            transition: transform 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        }
        .stat-number { font-size: 1.5rem; font-weight: bold; margin-bottom: 5px; min-height: 30px; }
        .stat-label { font-size: 0.85rem; opacity: 0.9; }
        button, .action-btn {
            background: var(--moh-green); border: none; color: var(--moh-white);
            padding: 10px 15px; border-radius: 6px; cursor: pointer;
            transition: background 0.3s, transform 0.2s; display: flex;
            align-items: center; gap: 8px; font-size: 0.9rem; text-decoration: none;
        }
        button:hover, .action-btn:hover { background: var(--moh-dark-green); transform: translateY(-2px); }
        button:active, .action-btn:active {
            transform: translateY(0) scale(0.98);
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
        }
        .data-section { margin-top: 25px; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        @keyframes slideDownFadeIn { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }
        .filters { display: flex; gap: 12px; margin-bottom: 20px; flex-wrap: wrap; }
        select, input {
            padding: 10px 12px; border-radius: 6px; border: 1px solid #ddd;
            min-width: 150px; flex: 1; background-color: var(--moh-white);
            font-size: 0.9rem; transition: border-color 0.3s, box-shadow 0.3s;
        }
        select:focus, input:focus { border-color: var(--moh-green); box-shadow: 0 0 0 2px rgba(0, 126, 58, 0.2); outline: none; }
        .table-container { overflow-x: auto; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }
        table { width: 100%; border-collapse: collapse; background: var(--moh-white); min-width: 600px; }
        th, td { padding: 12px 15px; text-align: right; border-bottom: 1px solid #e0e0e0; font-size: 0.9rem; }
        th {
            background: linear-gradient(135deg, var(--moh-green), var(--moh-dark-green));
            color: var(--moh-white); font-weight: bold; position: sticky; top: 0; z-index: 2;
        }
        tr:hover { background-color: var(--moh-light-green); }
        tbody tr {
            opacity: 0;
            transform: translateY(10px);
            transition: opacity 0.4s ease-out, transform 0.4s ease-out;
        }
        tbody tr.visible {
            opacity: 1;
            transform: translateY(0);
        }
        .modal {
            display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.6); z-index: 1000; justify-content: center; align-items: center;
        }
        .modal-content {
            background-color: var(--moh-white); padding: 25px 30px; border-radius: 12px;
            width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2); animation: scaleIn 0.4s ease-out;
        }
        @keyframes scaleIn { from { transform: scale(0.8) translateY(20px); opacity: 0; } to { transform: scale(1) translateY(0); opacity: 1; } }
        .modal.closing .modal-content { animation: scaleOut 0.3s ease-in forwards; }
        @keyframes scaleOut { from { transform: scale(1); opacity: 1; } to { transform: scale(0.8); opacity: 0; } }
        .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee; }
        .modal-title { font-size: 1.5rem; color: var(--moh-dark-green); font-weight: 600; }
        .close-btn { background: #f1f1f1; border: none; font-size: 1.2rem; cursor: pointer; color: #555; width: 30px; height: 30px; border-radius: 50%; transition: all 0.3s; }
        .close-btn:hover { background: #e0e0e0; color: black; }
        .detail-group { margin-bottom: 20px; }
        .detail-group-title { font-weight: bold; color: var(--moh-green); margin-bottom: 12px; border-bottom: 2px solid var(--moh-light-green); padding-bottom: 5px; font-size: 1.1rem; }
        .detail-item { margin-bottom: 12px; display: flex; align-items: center; font-size: 1rem; }
        .detail-item-icon { color: var(--moh-green); min-width: 30px; font-size: 1.1rem; }
        .detail-label { font-weight: bold; color: #555; margin-left: 5px; }
        .action-buttons { display: flex; gap: 15px; margin-top: 25px; flex-wrap: wrap; }
        .btn-primary { background-color: var(--moh-green); }
        .btn-secondary { background-color: var(--moh-gold); color: var(--moh-dark-green); }
        .user-location-section { background-color: var(--moh-white); border-radius: 12px; padding: 20px; margin-bottom: 25px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }
        .user-location-header { display: flex; align-items: center; gap: 10px; margin-bottom: 15px; color: var(--moh-green); }
        .user-location-content { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        .location-info, .closest-hospital-info { padding: 15px; background-color: var(--moh-light-green); border-radius: 8px; }
        #closest-hospital-data .info-item { margin-bottom: 8px; }
        .loading { width: 24px; height: 24px; border: 3px solid rgba(0, 126, 58, 0.3); border-radius: 50%; border-top-color: var(--moh-green); animation: spin 1s ease-in-out infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
        .loader { display: flex; justify-content: center; align-items: center; height: 200px; flex-direction: column; gap: 15px; }
        .loader-text { color: var(--moh-green); font-weight: bold; }
        .notification { position: fixed; bottom: 20px; right: 20px; padding: 15px 20px; background-color: var(--moh-green); color: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); transform: translateY(120%); opacity: 0; transition: transform 0.4s, opacity 0.4s; z-index: 2000; }
        .notification.show { transform: translateY(0); opacity: 1; }
        .back-to-top { position: fixed; bottom: 30px; left: 30px; width: 50px; height: 50px; background-color: var(--moh-green); color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 20px; cursor: pointer; opacity: 0; visibility: hidden; transition: all 0.3s ease; z-index: 999; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); }
        .back-to-top.visible { opacity: 1; visibility: visible; }
        footer { text-align: center; padding: 20px; margin-top: 40px; color: var(--moh-green); font-size: 0.9rem; }
        .leaflet-div-icon { border: none; background-color: transparent; }
        .map-marker { width: 30px; height: 30px; border-radius: 50% 50% 50% 0; transform: rotate(-45deg); display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 5px rgba(0,0,0,0.4); border: 2px solid white; }
        .map-marker i { transform: rotate(45deg); font-size: 14px; color: white; }
        .legend { padding: 10px; background: white; border-radius: 5px; box-shadow: 0 1px 5px rgba(0,0,0,0.4); line-height: 1.5; font-size: 12px; }
        .legend i { width: 18px; height: 18px; float: right; margin-left: 8px; border-radius: 50%; }
        @media (max-width: 992px) { .dashboard { grid-template-columns: 1fr; } h1 { font-size: 1.5rem; } }
        @media (max-width: 768px) {
            body { padding: 10px; }
            .user-location-content { grid-template-columns: 1fr; }
            .filters { flex-direction: column; }
            .card-body { height: 350px; }
            th:nth-child(7), td:nth-child(7) { display: none; }
        }
        @media (max-width: 480px) {
            h1 { font-size: 1.2rem; }
            .logo { width: 50px; height: 50px; font-size: 24px;}
            .card-body { height: 300px; }
            .stats-container { grid-template-columns: 1fr; height: auto; }
            th:nth-child(4), td:nth-child(4),
            th:nth-child(5), td:nth-child(5) { display: none; }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo-container">
                <div class="logo"><i class="fas fa-hospital"></i></div>
                <div>
                    <h1>القطاعات الصحية التابعة لفرع وزارة الصحة بمنطقة عسير</h1>
                    <p class="subtitle">منصة متكاملة لعرض بيانات المستشفيات والمراكز الصحية في منطقة عسير</p>
                </div>
            </div>
        </header>

        <div class="user-location-section animate-on-scroll">
            <div class="user-location-header"><i class="fas fa-map-marker-alt"></i><h2>الموقع الحالي</h2></div>
            <div class="user-location-content">
                <div class="location-info">
                    <h3><i class="fas fa-location-dot"></i> موقعك الحالي</h3>
                    <div>خط العرض: <span id="current-lat">--</span></div>
                    <div>خط الطول: <span id="current-lng">--</span></div>
                    <div>الدقة: <span id="current-accuracy">--</span></div>
                    <button id="get-location-btn" style="margin-top:10px;"><i class="fas fa-location-crosshairs"></i> تحديث الموقع</button>
                </div>
                <div class="closest-hospital-info">
                    <h3><i class="fas fa-hospital"></i> مستشفى عسير المركزي</h3>
                    <div id="asir-hospital-info">
                        <div class="info-item"><strong>الموقع:</strong> أبها</div>
                        <div class="info-item"><strong>خط العرض:</strong> ${18.219711}</div>
                        <div class="info-item"><strong>خط الطول:</strong> ${42.502859}</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="dashboard">
            <div class="card animate-on-scroll">
                <div class="card-header"><i class="fas fa-map-marked-alt"></i><span>الخريطة التفاعلية</span></div>
                <div class="card-body"><div id="hospitals-map"></div></div>
            </div>
            <div class="card animate-on-scroll">
                <div class="card-header"><i class="fas fa-chart-bar"></i><span>إحصائيات عامة</span></div>
                <div class="card-body">
                    <div class="stats-container">
                        <div class="stat-card" id="total-hospitals"><div class="stat-icon"><i class="fas fa-hospital"></i></div><div class="stat-number">0</div><div class="stat-label">عدد المستشفيات</div></div>
                        <div class="stat-card" id="total-beds"><div class="stat-icon"><i class="fas fa-bed"></i></div><div class="stat-number">0</div><div class="stat-label">إجمالي الأسرة</div></div>
                        <div class="stat-card" id="total-icu"><div class="stat-icon"><i class="fas fa-procedures"></i></div><div class="stat-number">0</div><div class="stat-label">أسرة العناية المركزة</div></div>
                        <div class="stat-card" id="private-hospitals"><div class="stat-icon"><i class="fas fa-stethoscope"></i></div><div class="stat-number">0</div><div class="stat-label">مستشفى خاص</div></div>
                        <div class="stat-card" id="general-hospitals"><div class="stat-icon"><i class="fas fa-clinic-medical"></i></div><div class="stat-number">0</div><div class="stat-label">مستشفيات عامة</div></div>
                        <div class="stat-card" id="specialized-hospitals"><div class="stat-icon"><i class="fas fa-heartbeat"></i></div><div class="stat-number">0</div><div class="stat-label">مستشفيات متخصصة</div></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="data-section animate-on-scroll">
            <div class="filters">
                <select id="filter-type"><option value="">جميع الأنواع</option></select>
                <select id="filter-supervisor"><option value="">جميع الجهات المشرفة</option></select>
                <input type="text" id="search-input" placeholder="ابحث باسم المستشفى أو المحافظة...">
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>#</th><th>اسم المستشفى</th><th>المحافظة</th><th>النوع</th><th>الجهة المشرفة</th>
                            <th>عدد الأسرة</th><th>أسرة العناية</th><th>المسافة من عسير المركزي</th><th>التفاصيل</th>
                        </tr>
                    </thead>
                    <tbody id="hospitals-table">
                        <tr><td colspan="9"><div class="loader"><div class="loading"></div><div class="loader-text">جاري تحميل البيانات...</div></div></td></tr>
                    </tbody>
                </table>
            </div>
        </div>

        <footer><p>© 2024 وزارة الصحة - المملكة العربية السعودية. جميع الحقوق محفوظة.</p></footer>
    </div>

    <div class="back-to-top" id="back-to-top"><i class="fas fa-arrow-up"></i></div>

    <div class="modal" id="details-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modal-hospital-name"></h2>
                <button class="close-btn" id="close-modal">×</button>
            </div>
            <div id="modal-content-body"></div>
            <div class="action-buttons">
                <button id="modal-google-maps-btn" class="action-btn btn-primary"><i class="fas fa-map-location-dot"></i> الانتقال للموقع على الخريطة</button>
            </div>
        </div>
    </div>

    <div class="notification" id="notification"><i class="fas fa-check-circle"></i><span id="notification-text"></span></div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let hospitals = [];
            const ASIR_CENTRAL_HOSPITAL = {
                lat: 18.219711, 
                lng: 42.502859, 
                name: "مستشفى عسير المركزي"
            };
            let map;
            let legend;
            let userMarker; 
            const hospitalMarkers = L.layerGroup();
            let currentHospital = null;

            const UI = {
                loaderText: document.querySelector('#hospitals-table .loader-text'),
                tableBody: document.getElementById('hospitals-table'),
                mapContainer: 'hospitals-map',
                lat: document.getElementById('current-lat'),
                lng: document.getElementById('current-lng'),
                accuracy: document.getElementById('current-accuracy'),
                notification: document.getElementById('notification'),
                notificationText: document.getElementById('notification-text'),
                modal: document.getElementById('details-modal'),
                modalTitle: document.getElementById('modal-hospital-name'),
                modalBody: document.getElementById('modal-content-body'),
                modalMapsBtn: document.getElementById('modal-google-maps-btn'),
                typeFilter: document.getElementById('filter-type'),
                supervisorFilter: document.getElementById('filter-supervisor'),
                searchInput: document.getElementById('search-input'),
                backToTop: document.getElementById('back-to-top'),
                getLocationBtn: document.getElementById('get-location-btn')
            };

            const DATA_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR6OX3acZw-8gzNb36iUGra5OI-7TQmhEeZTxpoyyPO1kdYNlycokRPa4FWf9pY6CRRRu9fl0SHhBVZ/pub?gid=0&single=true&output=csv";
            
            async function fetchData() {
                try {
                    const response = await fetch(DATA_URL, { cache: 'no-store' });
                    if (!response.ok) throw new Error(`Network error: ${response.statusText}`);
                    const csvText = await response.text();
                    const results = Papa.parse(csvText, { header: true, skipEmptyLines: true, transformHeader: h => h.trim() });
                    if (results.errors.length) throw new Error(`Parsing error: ${results.errors[0].message}`);
                    
                    const data = results.data.map((row, i) => {
                        const parsedRow = {};
                        for (const key in row) {
                            parsedRow[key] = row[key];
                        }
                        parsedRow.id = i;
                        parsedRow.lat = parseFloat(row['Latitude']);
                        parsedRow.lng = parseFloat(row['Longitude']);
                        if (parsedRow.lat && parsedRow.lng) {
                            parsedRow.distanceFromAsir = haversine(parsedRow.lat, parsedRow.lng, ASIR_CENTRAL_HOSPITAL.lat, ASIR_CENTRAL_HOSPITAL.lng);
                        }
                        return parsedRow;
                    });
                    
                    hospitals = data.filter(h => h.lat && h.lng && h['أسم المستشفى'] !== 'N/A' && h['أسم المستشفى']);
                    if (hospitals.length === 0) throw new Error("No valid data found in the sheet.");
                    initializeApp();
                    showNotification(`تم تحميل ${hospitals.length} مستشفى بنجاح`, 'success');
                } catch (error) {
                    console.error("Fetch Data Error:", error);
                    UI.loaderText.textContent = `❌ فشل تحميل البيانات: ${error.message}`;
                    showNotification("فشل في جلب البيانات. تحقق من الرابط وإعدادات النشر.", 'error');
                }
            }
            
            function initializeApp() {
                initMap();
                addMapLegend();
                populateFilters();
                updateStats();
                renderTable(hospitals);
                addEventListeners();
                
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('visible');
                            observer.unobserve(entry.target);
                        }
                    });
                }, { threshold: 0.1 });
                document.querySelectorAll('.animate-on-scroll').forEach(el => observer.observe(el));
            }

            function initMap() {
                map = L.map(UI.mapContainer).setView([18.5, 42.5], 8); 
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '© OpenStreetMap' }).addTo(map);
                
                const asirHospitalIcon = L.divIcon({
                    className: 'leaflet-div-icon',
                    html: `<div class="map-marker" style="background-color: #28a745;"><i class="fas fa-star-of-life"></i></div>`,
                    iconSize: [30, 42], iconAnchor: [15, 42]
                });
                L.marker([ASIR_CENTRAL_HOSPITAL.lat, ASIR_CENTRAL_HOSPITAL.lng], { icon: asirHospitalIcon }).addTo(map)
                    .bindPopup(`<b>${ASIR_CENTRAL_HOSPITAL.name}</b>`).openPopup();

                hospitalMarkers.addTo(map);
                renderMapMarkers(hospitals);
            }

            function getMarkerStyle(hospitalType) {
                switch (hospitalType) {
                    case 'مستشفيات عامة': return { color: '#007bff', icon: 'fa-hospital' };
                    case 'مستشفيات متخصصة': return { color: '#dc3545', icon: 'fa-heart-pulse' };
                    case 'مستشفيات مركزية': return { color: '#28a745', icon: 'fa-star-of-life' };
                    case 'مستشفى خاص': return { color: '#ffc107', icon: 'fa-clinic-medical' };
                    default: return { color: '#6c757d', icon: 'fa-h-square' };
                }
            }

            function renderMapMarkers(data) {
                hospitalMarkers.clearLayers();
                data.forEach(h => {
                    const style = getMarkerStyle(h['نوع المستشفى']);
                    const icon = L.divIcon({
                        className: 'leaflet-div-icon',
                        html: `<div class="map-marker" style="background-color: ${style.color};"><i class="fas ${style.icon}"></i></div>`,
                        iconSize: [30, 42], iconAnchor: [15, 42]
                    });
                    const marker = L.marker([h.lat, h.lng], { icon: icon }).bindPopup(`<b>${h['أسم المستشفى']}</b><br>${h['نوع المستشفى']}`);
                    hospitalMarkers.addLayer(marker);
                });
            }

            function addMapLegend() {
                if (legend) map.removeControl(legend);
                legend = L.control({ position: 'bottomright' });
                legend.onAdd = function (map) {
                    const div = L.DomUtil.create('div', 'legend');
                    const types = {
                        'مستشفيات عامة': getMarkerStyle('مستشفيات عامة'),
                        'مستشفيات متخصصة': getMarkerStyle('مستشفيات متخصصة'),
                        'مستشفيات مركزية': getMarkerStyle('مستشفيات مركزية'),
                        'مستشفى خاص': getMarkerStyle('مستشفى خاص'),
                        'أخرى': getMarkerStyle('default')
                    };
                    div.innerHTML += '<h4>أنواع المستشفيات</h4>';
                    for (let key in types) { div.innerHTML += `<i style="background: ${types[key].color}"></i> ${key}<br>`; }
                    return div;
                };
                legend.addTo(map);
            }

            function populateFilters() {
                const types = [...new Set(hospitals.map(h => h['نوع المستشفى']))].filter(Boolean);
                const supervisors = [...new Set(hospitals.map(h => h['الجهة المشرفة']))].filter(Boolean);
                UI.typeFilter.innerHTML = '<option value="">جميع الأنواع</option>' + types.map(t => `<option value="${t}">${t}</option>`).join('');
                UI.supervisorFilter.innerHTML = '<option value="">جميع الجهات</option>' + supervisors.map(s => `<option value="${s}">${s}</option>`).join('');
            }
            
            function renderTable(data) {
                UI.tableBody.innerHTML = '';
                if (!data.length) {
                    UI.tableBody.innerHTML = '<tr><td colspan="9" style="text-align:center;">لا توجد نتائج مطابقة</td></tr>';
                    renderMapMarkers([]);
                    return;
                }
                const rowsHTML = data.map((h, i) => `
                    <tr>
                        <td>${i + 1}</td>
                        <td>${h['أسم المستشفى']}</td>
                        <td>${h['المحافظة']}</td>
                        <td>${h['نوع المستشفى']}</td>
                        <td>${h['الجهة المشرفة']}</td>
                        <td>${h['عدد أسرة التنويم'] || '--'}</td>
                        <td>${h['عدد اسرة العناية المركزة كبار'] || '--'}</td>
                        <td>${h.distanceFromAsir ? `${h.distanceFromAsir} كم` : '--'}</td>
                        <td><button class="details-btn" data-id="${h.id}"><i class="fas fa-info-circle"></i></button></td>
                    </tr>`).join('');
                UI.tableBody.innerHTML = rowsHTML;
                
                const rows = UI.tableBody.querySelectorAll('tr');
                rows.forEach((row, index) => {
                    setTimeout(() => {
                        row.classList.add('visible');
                    }, index * 40);
                });
                
                renderMapMarkers(data);
            }
            
            function animateCounter(el, end, duration = 1500) {
                let start = 0;
                const range = end - start;
                if (range === 0) {
                    el.textContent = end.toLocaleString();
                    return;
                }
                let startTime = null;
                function step(timestamp) {
                    if (!startTime) startTime = timestamp;
                    const progress = Math.min((timestamp - startTime) / duration, 1);
                    const current = Math.floor(progress * range + start);
                    el.textContent = current.toLocaleString();
                    if (progress < 1) {
                        window.requestAnimationFrame(step);
                    } else {
                        el.textContent = end.toLocaleString();
                    }
                }
                window.requestAnimationFrame(step);
            }

            function updateStats() {
                const stats = {
                    total: hospitals.length,
                    beds: hospitals.reduce((sum, h) => sum + (parseInt(h['عدد أسرة التنويم']) || 0), 0),
                    icu: hospitals.reduce((sum, h) => sum + (parseInt(h['عدد اسرة العناية المركزة كبار']) || 0), 0),
                    private: hospitals.filter(h => h['نوع المستشفى'] === "مستشفى خاص").length,
                    general: hospitals.filter(h => h['نوع المستشفى'] === "مستشفيات عامة").length,
                    specialized: hospitals.filter(h => h['نوع المستشفى'] === "مستشفيات متخصصة").length,
                };
                
                animateCounter(document.querySelector('#total-hospitals .stat-number'), stats.total);
                animateCounter(document.querySelector('#total-beds .stat-number'), stats.beds);
                animateCounter(document.querySelector('#total-icu .stat-number'), stats.icu);
                animateCounter(document.querySelector('#private-hospitals .stat-number'), stats.private);
                animateCounter(document.querySelector('#general-hospitals .stat-number'), stats.general);
                animateCounter(document.querySelector('#specialized-hospitals .stat-number'), stats.specialized);
            }

            function getUserLocation() {
                if (!navigator.geolocation) {
                    showNotification("خطأ: متصفحك لا يدعم تحديد الموقع.", 'error');
                    return;
                }
                
                navigator.geolocation.getCurrentPosition(pos => {
                    const userLocation = { lat: pos.coords.latitude, lng: pos.coords.longitude };
                    UI.lat.textContent = userLocation.lat.toFixed(5);
                    UI.lng.textContent = userLocation.lng.toFixed(5);
                    UI.accuracy.textContent = `${Math.round(pos.coords.accuracy)} م`;
                    
                    if (userMarker) {
                        map.removeLayer(userMarker);
                    }
                    
                    const userIcon = L.divIcon({
                        className: 'leaflet-div-icon',
                        html: `<div class="map-marker" style="background-color: #007e3a;"><i class="fas fa-user"></i></div>`,
                        iconSize: [30, 42], iconAnchor: [15, 42]
                    });
                    userMarker = L.marker([userLocation.lat, userLocation.lng], { icon: userIcon }).addTo(map);
                    userMarker.bindPopup("<b>موقعك الحالي</b>").openPopup();
                    
                    showNotification("تم تحديد موقعك بنجاح.", 'success');
                }, error => {
                    showNotification("لا يمكن الوصول لموقعك.", 'error');
                });
            }

            function haversine(lat1, lon1, lat2, lon2) {
                const R = 6371;
                const dLat = (lat2 - lat1) * Math.PI / 180;
                const dLon = (lon2 - lon1) * Math.PI / 180;
                const a = Math.sin(dLat / 2) ** 2 + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) ** 2;
                return parseFloat((R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))).toFixed(1));
            }

            function filterAndRender() {
                const type = UI.typeFilter.value;
                const supervisor = UI.supervisorFilter.value;
                const search = UI.searchInput.value.toLowerCase();
                const filtered = hospitals.filter(h =>
                    (type === '' || h['نوع المستشفى'] === type) && (supervisor === '' || h['الجهة المشرفة'] === supervisor) &&
                    (h['أسم المستشفى'].toLowerCase().includes(search) || h['المحافظة'].toLowerCase().includes(search))
                );
                renderTable(filtered);
            }

            function showDetails(id) {
                const hospital = hospitals.find(h => h.id === id);
                if (!hospital) return;
                currentHospital = hospital;
                
                UI.modalTitle.textContent = hospital['أسم المستشفى'];
                
                let detailsHTML = '';
                const excludedKeys = ['id', 'Latitude', 'Longitude', 'موقع المنشأة في قوقل ماب'];
                const categorizedKeys = {
                    'بيانات المستشفى العامة': ['المحافظة', 'نوع المستشفى', 'الجهة المشرفة', 'مدير المستشفى', 'ملكية المباني'],
                    'إحصائيات الأسرة': ['عدد أسرة التنويم', 'عدد اسرة العناية المركزة كبار', 'عدد اسرة العناية المركزة أطفال', 'عدد اسرة العناية المركزة حديثي الولادة', 'عدد أسرة العناية القلبية', 'عدد أسرة الطوارئ', 'عدد أسرة العزل'],
                    'إحصائيات المرضى والعيادات': ['عدد المستفيدين', 'عدد المراجعين', 'عدد الحالات الطارئة والإصابات', 'عدد العيادات'],
                    'بيانات الإسعاف': ['عدد سيارات الإسعاف المستلمة', 'عدد بسطات الإسعاف الأساسية', 'الإسعافات مثل : سداحي'],
                    'الخدمات والمشاريع': ['الخدمات النوعية: مثل وحدة علاج السمنة', 'المركز التخصصي: مثال مركز السكري والغدد الصماء', 'أذكر المشاريع القائمة', 'أذكر المشاريع المنتظرة', 'أذكر المشاريع المستقبلية'],
                    'بيانات إضافية': []
                };

                const iconMap = {
                    'المحافظة': 'fa-map-marker-alt',
                    'نوع المستشفى': 'fa-hospital-symbol',
                    'الجهة المشرفة': 'fa-building',
                    'مدير المستشفى': 'fa-user-tie',
                    'ملكية المباني': 'fa-building',
                    'عدد أسرة التنويم': 'fa-bed',
                    'عدد اسرة العناية المركزة كبار': 'fa-procedures',
                    'عدد اسرة العناية المركزة أطفال': 'fa-child-reaching',
                    'عدد اسرة العناية المركزة حديثي الولادة': 'fa-baby',
                    'عدد أسرة العناية القلبية': 'fa-heartbeat',
                    'عدد أسرة الطوارئ': 'fa-exclamation-triangle',
                    'عدد أسرة العزل': 'fa-head-side-mask',
                    'عدد المستفيدين': 'fa-user-group',
                    'عدد المراجعين': 'fa-user-check',
                    'عدد الحالات الطارئة والإصابات': 'fa-briefcase-medical',
                    'عدد العيادات': 'fa-clinic-medical',
                    'عدد سيارات الإسعاف المستلمة': 'fa-car-on',
                    'عدد بسطات الإسعاف الأساسية': 'fa-car-on',
                    'الإسعافات مثل : سداحي': 'fa-truck-medical',
                    'الخدمات النوعية: مثل وحدة علاج السمنة': 'fa-hand-holding-medical',
                    'المركز التخصصي: مثال مركز السكري والغدد الصماء': 'fa-ribbon',
                    'أذكر المشاريع القائمة': 'fa-clipboard-check',
                    'أذكر المشاريع المنتظرة': 'fa-clock',
                    'أذكر المشاريع المستقبلية': 'fa-lightbulb'
                };

                const allKnownKeys = Object.values(categorizedKeys).flat();
                
                // Add any extra keys from the data that are not in our predefined categories
                for (const key in hospital) {
                    if (!allKnownKeys.includes(key) && !excludedKeys.includes(key)) {
                        const value = hospital[key];
                        // Check if value is not empty and is a string before trimming
                        if (value !== null && value !== undefined && String(value).trim() !== '') {
                            categorizedKeys['بيانات إضافية'].push(key);
                            iconMap[key] = 'fa-circle-info';
                        }
                    }
                }

                for (const section in categorizedKeys) {
                    const sectionKeys = categorizedKeys[section];
                    let sectionContent = '';
                    let hasContent = false;
                    
                    sectionKeys.forEach(key => {
                        const value = hospital[key];
                        // Convert to string and trim to handle numbers/empty cells
                        const trimmedValue = (value !== null && value !== undefined) ? String(value).trim() : '';

                        if (trimmedValue !== '') {
                            const icon = iconMap[key] || 'fa-circle-info';
                            sectionContent += `
                                <div class="detail-item">
                                    <i class="fas ${icon} detail-item-icon"></i>
                                    <span class="detail-label">${key}:</span>
                                    <span>${trimmedValue}</span>
                                </div>
                            `;
                            hasContent = true;
                        }
                    });

                    if (hasContent) {
                        detailsHTML += `
                            <div class="detail-group">
                                <div class="detail-group-title">${section}</div>
                                ${sectionContent}
                            </div>
                        `;
                    }
                }
                
                UI.modalBody.innerHTML = detailsHTML;
                UI.modal.style.display = 'flex';
            }
            
            function showNotification(message, type) {
                UI.notificationText.textContent = message;
                UI.notification.className = `notification show ${type}`;
                setTimeout(() => {
                    UI.notification.classList.remove('show');
                }, 3000);
            }

            function addEventListeners() {
                UI.typeFilter.addEventListener('change', filterAndRender);
                UI.supervisorFilter.addEventListener('change', filterAndRender);
                UI.searchInput.addEventListener('input', filterAndRender);
                UI.getLocationBtn.addEventListener('click', getUserLocation);
                
                UI.tableBody.addEventListener('click', e => {
                    if (e.target.closest('.details-btn')) {
                        const id = parseInt(e.target.closest('.details-btn').dataset.id);
                        showDetails(id);
                    }
                });
                
                UI.modal.addEventListener('click', e => {
                    if (e.target === UI.modal || e.target.closest('#close-modal')) {
                        UI.modal.classList.add('closing');
                        setTimeout(() => {
                            UI.modal.style.display = 'none';
                            UI.modal.classList.remove('closing');
                        }, 300);
                    }
                });
                
                UI.modalMapsBtn.addEventListener('click', () => {
                    if (currentHospital && currentHospital['موقع المنشأة في قوقل ماب']) {
                        window.open(currentHospital['موقع المنشأة في قوقل ماب'], '_blank');
                    } else {
                        showNotification("لا يوجد رابط لخرائط جوجل لهذا المستشفى.", 'error');
                    }
                });

                document.getElementById('back-to-top').addEventListener('click', () => {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });

                window.addEventListener('scroll', () => {
                    if (window.scrollY > 300) {
                        UI.backToTop.classList.add('visible');
                    } else {
                        UI.backToTop.classList.remove('visible');
                    }
                });
            }

            fetchData();
        });
    </script>
</body>
</html>
